searchNodes=[{"doc":"DataMiner has twi main module: Apriori and Eclat. see their documentation.","ref":"DataMiner.html","title":"DataMiner","type":"module"},{"doc":"Main function for escript.","ref":"DataMiner.html#main/1","title":"DataMiner.main/1","type":"function"},{"doc":"Documentation for Apriori Algorithm Implementation.","ref":"DataMiner.Apriori.html","title":"DataMiner.Apriori","type":"module"},{"doc":"Implementation of eclat algorithm, this function will return any frequent itemset. Examples iex&gt; DataMiner.Eclat.eclat([{[:a], MapSet.new([2])}, {[:b], MapSet.new([2])}], [], 0.1, 3) [[{[:b, :a], #MapSet&lt;[2]&gt;}], [{[:a], #MapSet&lt;[2]&gt;}, {[:b], #MapSet&lt;[2]&gt;}]]","ref":"DataMiner.Apriori.html#apriori/5","title":"DataMiner.Apriori.apriori/5","type":"function"},{"doc":"This function will calculate frequency of any itemset by see itemset frequency inside transactions. Examples iex&gt; DataMiner.Apriori.calculate_itemsets_frequency([[&quot;a&quot;, &quot;b&quot;], [&quot;a&quot;, &quot;c&quot;]] |&gt; Enum.map(&amp;MapSet.new(&amp;1)), [[&quot;a&quot;, &quot;c&quot;, &quot;d&quot;], [&quot;b&quot;, &quot;c&quot;, &quot;e&quot;], [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;e&quot;], [&quot;b&quot;, &quot;e&quot;]] |&gt; Enum.map(&amp;MapSet.new(&amp;1))) [{[&quot;a&quot;, &quot;b&quot;], 1}, {[&quot;a&quot;, &quot;c&quot;], 2}]","ref":"DataMiner.Apriori.html#calculate_itemsets_frequency/2","title":"DataMiner.Apriori.calculate_itemsets_frequency/2","type":"function"},{"doc":"Export frequents will export all frequent itemsets to a file.","ref":"DataMiner.Apriori.html#export_frequents/1","title":"DataMiner.Apriori.export_frequents/1","type":"function"},{"doc":"import file.","ref":"DataMiner.Apriori.html#import_file/1","title":"DataMiner.Apriori.import_file/1","type":"function"},{"doc":"import frequencies file.","ref":"DataMiner.Apriori.html#import_frequencies/0","title":"DataMiner.Apriori.import_frequencies/0","type":"function"},{"doc":"import transactions file.","ref":"DataMiner.Apriori.html#import_transactions/0","title":"DataMiner.Apriori.import_transactions/0","type":"function"},{"doc":"Main function for run algorithm with minimum support. This function will get minimum support as input. This number is expressed as a percentage. At the end of function result of Apriori algorithm will save to a file.","ref":"DataMiner.Apriori.html#main/1","title":"DataMiner.Apriori.main/1","type":"function"},{"doc":"This function will merge a list of itemsets to a list of sub itemsets. So input is a list of itemsets and output is a list of merged itemsets.","ref":"DataMiner.Apriori.html#merge_itemsets/2","title":"DataMiner.Apriori.merge_itemsets/2","type":"function"},{"doc":"merger will merge two itemsets. ## Examples iex&gt; DataMiner.Apriori.merger([1, 2, 3], [4, 2, 3]) [4, 1, 2, 3]","ref":"DataMiner.Apriori.html#merger/2","title":"DataMiner.Apriori.merger/2","type":"function"},{"doc":"When itemsets merged succesfully, we should pipe them into remove_low_frequencies that will remove all of itemsets that size of their transactions are lower that minimum support. This is for downward closers!","ref":"DataMiner.Apriori.html#remove_low_frequencies/3","title":"DataMiner.Apriori.remove_low_frequencies/3","type":"function"},{"doc":"support will calculate support of an itemset by its frequency","ref":"DataMiner.Apriori.html#support/2","title":"DataMiner.Apriori.support/2","type":"function"},{"doc":"Documentation for Eclat Algorithm Implementation.","ref":"DataMiner.Eclat.html","title":"DataMiner.Eclat","type":"module"},{"doc":"Implementation of eclat algorithm, this function will return any frequent itemset. Examples iex&gt; DataMiner.Eclat.eclat([{[:a], MapSet.new([2])}, {[:b], MapSet.new([2])}], [], 0.1, 3) [[{[:b, :a], #MapSet&lt;[2]&gt;}], [{[:a], #MapSet&lt;[2]&gt;}, {[:b], #MapSet&lt;[2]&gt;}]]","ref":"DataMiner.Eclat.html#eclat/4","title":"DataMiner.Eclat.eclat/4","type":"function"},{"doc":"Export frequents will export all frequent itemsets to a file.","ref":"DataMiner.Eclat.html#export_frequents/1","title":"DataMiner.Eclat.export_frequents/1","type":"function"},{"doc":"Import file.","ref":"DataMiner.Eclat.html#import_file/1","title":"DataMiner.Eclat.import_file/1","type":"function"},{"doc":"import transactions file.","ref":"DataMiner.Eclat.html#import_transactions/0","title":"DataMiner.Eclat.import_transactions/0","type":"function"},{"doc":"Main function for run algorithm with minimum support. This function will get minimum support as input. This number is expressed as a percentage. At the end of function result of Eclat algorithm will save to a file.","ref":"DataMiner.Eclat.html#main/1","title":"DataMiner.Eclat.main/1","type":"function"},{"doc":"This function will merge a list of itemsets to a list of sub itemsets. So input is a list of itemsets and output is a list of merged itemsets. note: Commented codes are a parallel code for merging. Examples iex&gt; DataMiner.Eclat.merge_itemsets([{[2, 1], MapSet.new([2])}, {[3, 1], MapSet.new([2])}]) [{[3, 2, 1], #MapSet&lt;[2]&gt;}]","ref":"DataMiner.Eclat.html#merge_itemsets/1","title":"DataMiner.Eclat.merge_itemsets/1","type":"function"},{"doc":"This function will merge an itemset with another itemset. What is merge itemsets and make sub itemset? if we have a = [1, 2, 4] and b = [1, 2, 5] then merge of them will be: result = [1, 2, 4, 5] a and b can merge because of (0 .. k-1)th items in their lists are similar. In this module for avoiding of list overhead, we merge lists by (1 .. k)th items. if a = [2, 1] and b = [3, 1] then merge of them with this algorithm will be: result = [3, 2, 1] Examples iex&gt; DataMiner.Eclat.merge_itemsets([{[2, 1], MapSet.new([2])}, {[3, 1], MapSet.new([2])}]) [{[3, 2, 1], #MapSet&lt;[2]&gt;}]","ref":"DataMiner.Eclat.html#merger/3","title":"DataMiner.Eclat.merger/3","type":"function"},{"doc":"When itemsets merged succesfully, we should pipe them into remove_low_frequencies that will remove all of itemsets that size of their transactions are lower that minimum support. This is for downward closers! Examples iex&gt; DataMiner.Eclat.remove_low_frequencies([{[:a], MapSet.new([1, 2, 3])}, {[:b], MapSet.new([1])}], 50, 3) [{[:a], #MapSet&lt;[1, 2, 3]&gt;}]","ref":"DataMiner.Eclat.html#remove_low_frequencies/3","title":"DataMiner.Eclat.remove_low_frequencies/3","type":"function"},{"doc":"support will calculate support of an itemset by its frequency","ref":"DataMiner.Eclat.html#support/2","title":"DataMiner.Eclat.support/2","type":"function"},{"doc":"This function will get main transactions and return eclat form of that. Eclat form is a map that show transactions of an item that it is inside them! Examples iex&gt; DataMiner.Eclat.transactios_to_eclat_form([[&quot;1&quot;, &quot;2&quot;], [&quot;2&quot;, &quot;4&quot;], [&quot;1&quot;, &quot;5&quot;], [&quot;1&quot;, &quot;6&quot;, &quot;7&quot;, &quot;3&quot;, &quot;1&quot;, &quot;2&quot;, &quot;9&quot;]]) {[:&quot;1&quot;] =&gt; #MapSet&lt;[0, 2, 3]&gt;, [:&quot;2&quot;] =&gt; #MapSet&lt;[0, 1, 3]&gt;, [:&quot;3&quot;] =&gt; #MapSet&lt;[3]&gt;, [:&quot;4&quot;] =&gt; #MapSet&lt;[1]&gt;, [:&quot;5&quot;] =&gt; #MapSet&lt;[2]&gt;, [:&quot;6&quot;] =&gt; #MapSet&lt;[3]&gt;, [:&quot;7&quot;] =&gt; #MapSet&lt;[3]&gt;, [:&quot;9&quot;] =&gt; #MapSet&lt;[3]&gt;}","ref":"DataMiner.Eclat.html#transactios_to_eclat_form/1","title":"DataMiner.Eclat.transactios_to_eclat_form/1","type":"function"},{"doc":"DataMiner TODO: Add description","ref":"readme.html","title":"DataMiner","type":"extras"},{"doc":"If available in Hex, the package can be installed by adding data_miner to your list of dependencies in mix.exs: def deps do [ {:data_miner, &quot;~&gt; 0.1.0&quot;} ] end Documentation can be generated with ExDoc and published on HexDocs. Once published, the docs can be found at https://hexdocs.pm/data_miner.","ref":"readme.html#installation","title":"DataMiner - Installation","type":"extras"}]